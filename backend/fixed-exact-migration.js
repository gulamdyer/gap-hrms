/**
 * Fixed Exact Database Migration Script
 * Generated from source database analysis with syntax fixes
 * Created: 2025-08-04T16:35:52.404Z
 * Tables: 39
 */

const { executeQuery, closeDatabase } = require('./config/database');
const oracledb = require('oracledb');
const path = require('path');

async function runFixedExactMigration() {
  try {
    console.log('üöÄ Starting fixed exact database migration...');
    
    // Initialize Oracle Thin client
    oracledb.initOracleClient();
    console.log('‚úÖ Oracle Thin client initialized');
    
    // Load environment variables
    require('dotenv').config({ path: path.join(__dirname, '.env') });
    
    const dbConfig = {
      user: process.env.ORACLE_USER,
      password: process.env.ORACLE_PASSWORD,
      connectString: process.env.ORACLE_CONNECT_STRING,
      poolMin: parseInt(process.env.ORACLE_POOL_MIN) || 2,
      poolMax: parseInt(process.env.ORACLE_POOL_MAX) || 10,
      poolIncrement: parseInt(process.env.ORACLE_POOL_INCREMENT) || 1
    };
    
    await oracledb.createPool(dbConfig);
    console.log('‚úÖ Database pool created successfully');
    
    // Create tables with exact structure (fixed syntax)
    console.log('üìù Creating tables with exact structure...');
    
    // HRMS_ADVANCES
    await executeQuery(`CREATE TABLE HRMS_ADVANCES (
  ADVANCE_ID NUMBER NOT NULL,
  EMPLOYEE_ID NUMBER NOT NULL,
  ADVANCE_TYPE VARCHAR2(50) NOT NULL,
  AMOUNT NUMBER(10,2) NOT NULL,
  REASON VARCHAR2(500) NOT NULL,
  REQUEST_DATE DATE DEFAULT SYSDATE,
  CREATED_BY NUMBER NOT NULL,
  CREATED_AT TIMESTAMP(6) DEFAULT SYSTIMESTAMP,
  UPDATED_AT TIMESTAMP(6) DEFAULT SYSTIMESTAMP,
  AMOUNT_REQUIRED_ON_DATE DATE,
  DEDUCTION_MONTH VARCHAR2(20),
  PRIMARY KEY (ADVANCE_ID)
)`);
    console.log('‚úÖ Created table: HRMS_ADVANCES');

    // HRMS_ATTENDANCE
    await executeQuery(`CREATE TABLE HRMS_ATTENDANCE (
  ATTENDANCE_ID NUMBER NOT NULL,
  EMPLOYEE_ID NUMBER NOT NULL,
  ATTENDANCE_DATE DATE NOT NULL,
  SHIFT_ID NUMBER,
  SCHEDULED_IN_TIME VARCHAR2(5),
  SCHEDULED_OUT_TIME VARCHAR2(5),
  ACTUAL_IN_TIME VARCHAR2(5),
  ACTUAL_OUT_TIME VARCHAR2(5),
  IN_LOCATION VARCHAR2(100),
  OUT_LOCATION VARCHAR2(100),
  IN_DEVICE_ID VARCHAR2(50),
  OUT_DEVICE_ID VARCHAR2(50),
  IN_METHOD VARCHAR2(20) DEFAULT 'MANUAL',
  OUT_METHOD VARCHAR2(20) DEFAULT 'MANUAL',
  WORK_HOURS NUMBER(5,2),
  OVERTIME_HOURS NUMBER(5,2) DEFAULT 0,
  LATE_MINUTES NUMBER(3) DEFAULT 0,
  EARLY_LEAVE_MINUTES NUMBER(3) DEFAULT 0,
  STATUS VARCHAR2(20) DEFAULT 'PRESENT',
  LEAVE_TYPE VARCHAR2(20),
  REMARKS VARCHAR2(500),
  APPROVED_BY NUMBER,
  APPROVED_AT TIMESTAMP(6),
  CREATED_BY NUMBER,
  CREATED_AT TIMESTAMP(6) DEFAULT SYSTIMESTAMP,
  UPDATED_AT TIMESTAMP(6) DEFAULT SYSTIMESTAMP,
  PRIMARY KEY (ATTENDANCE_ID)
)`);
    console.log('‚úÖ Created table: HRMS_ATTENDANCE');

    // HRMS_ATTENDANCE_LOGS
    await executeQuery(`CREATE TABLE HRMS_ATTENDANCE_LOGS (
  LOG_ID NUMBER NOT NULL,
  DEVICE_ID NUMBER,
  EMPLOYEE_ID NUMBER,
  LOG_TIME TIMESTAMP(6) NOT NULL,
  LOG_TYPE VARCHAR2(20),
  BIOMETRIC_DATA VARCHAR2(1000),
  VERIFICATION_METHOD VARCHAR2(20),
  VERIFICATION_STATUS VARCHAR2(20) DEFAULT 'SUCCESS',
  DEVICE_RESPONSE VARCHAR2(500),
  PROCESSED NUMBER(1) DEFAULT 0,
  PROCESSED_AT TIMESTAMP(6),
  CREATED_AT TIMESTAMP(6) DEFAULT SYSTIMESTAMP,
  PRIMARY KEY (LOG_ID)
)`);
    console.log('‚úÖ Created table: HRMS_ATTENDANCE_LOGS');

    // HRMS_ATTENDANCE_RULES
    await executeQuery(`CREATE TABLE HRMS_ATTENDANCE_RULES (
  RULE_ID NUMBER NOT NULL,
  RULE_NAME VARCHAR2(100) NOT NULL,
  RULE_TYPE VARCHAR2(20) NOT NULL,
  APPLICABLE_FROM VARCHAR2(20) DEFAULT 'ALL',
  APPLICABLE_TO VARCHAR2(500),
  CONDITION_TYPE VARCHAR2(20),
  CONDITION_VALUE NUMBER(5,2),
  ACTION_TYPE VARCHAR2(20),
  ACTION_VALUE NUMBER(5,2),
  IS_ACTIVE NUMBER(1) DEFAULT 1,
  DESCRIPTION VARCHAR2(500),
  CREATED_BY NUMBER,
  CREATED_AT TIMESTAMP(6) DEFAULT SYSTIMESTAMP,
  UPDATED_AT TIMESTAMP(6) DEFAULT SYSTIMESTAMP,
  PRIMARY KEY (RULE_ID)
)`);
    console.log('‚úÖ Created table: HRMS_ATTENDANCE_RULES');

    // HRMS_ATTENDANCE_SETTINGS
    await executeQuery(`CREATE TABLE HRMS_ATTENDANCE_SETTINGS (
  SETTING_ID NUMBER NOT NULL,
  SETTING_NAME VARCHAR2(100) NOT NULL,
  SETTING_VALUE VARCHAR2(500),
  SETTING_TYPE VARCHAR2(20),
  IS_ACTIVE NUMBER(1) DEFAULT 1,
  DESCRIPTION VARCHAR2(500),
  CREATED_BY NUMBER,
  CREATED_AT TIMESTAMP(6) DEFAULT SYSTIMESTAMP,
  UPDATED_AT TIMESTAMP(6) DEFAULT SYSTIMESTAMP,
  PRIMARY KEY (SETTING_ID)
)`);
    console.log('‚úÖ Created table: HRMS_ATTENDANCE_SETTINGS');

    // HRMS_BIOMETRIC_DEVICES
    await executeQuery(`CREATE TABLE HRMS_BIOMETRIC_DEVICES (
  DEVICE_ID NUMBER NOT NULL,
  DEVICE_NAME VARCHAR2(100) NOT NULL,
  DEVICE_TYPE VARCHAR2(20) NOT NULL,
  DEVICE_IP VARCHAR2(15),
  DEVICE_PORT NUMBER,
  DEVICE_LOCATION VARCHAR2(100),
  DEVICE_STATUS VARCHAR2(20) DEFAULT 'ACTIVE',
  LAST_SYNC_TIME TIMESTAMP(6),
  CREATED_BY NUMBER,
  CREATED_AT TIMESTAMP(6) DEFAULT SYSTIMESTAMP,
  UPDATED_AT TIMESTAMP(6) DEFAULT SYSTIMESTAMP,
  PRIMARY KEY (DEVICE_ID)
)`);
    console.log('‚úÖ Created table: HRMS_BIOMETRIC_DEVICES');

    // HRMS_CALENDAR
    await executeQuery(`CREATE TABLE HRMS_CALENDAR (
  CALENDAR_ID NUMBER NOT NULL,
  CALENDAR_NAME VARCHAR2(100) NOT NULL,
  CALENDAR_TYPE VARCHAR2(20) NOT NULL,
  START_DATE DATE NOT NULL,
  END_DATE DATE,
  IS_ACTIVE NUMBER(1) DEFAULT 1,
  DESCRIPTION VARCHAR2(500),
  CREATED_BY NUMBER,
  CREATED_AT TIMESTAMP(6) DEFAULT SYSTIMESTAMP,
  UPDATED_AT TIMESTAMP(6) DEFAULT SYSTIMESTAMP,
  PRIMARY KEY (CALENDAR_ID)
)`);
    console.log('‚úÖ Created table: HRMS_CALENDAR');

    // HRMS_CALENDAR_HOLIDAYS
    await executeQuery(`CREATE TABLE HRMS_CALENDAR_HOLIDAYS (
  HOLIDAY_ID NUMBER NOT NULL,
  CALENDAR_ID NUMBER NOT NULL,
  HOLIDAY_NAME VARCHAR2(100) NOT NULL,
  HOLIDAY_DATE DATE NOT NULL,
  HOLIDAY_TYPE VARCHAR2(20) DEFAULT 'PUBLIC',
  DESCRIPTION VARCHAR2(500),
  CREATED_BY NUMBER,
  CREATED_AT TIMESTAMP(6) DEFAULT SYSTIMESTAMP,
  UPDATED_AT TIMESTAMP(6) DEFAULT SYSTIMESTAMP,
  PRIMARY KEY (HOLIDAY_ID)
)`);
    console.log('‚úÖ Created table: HRMS_CALENDAR_HOLIDAYS');

    // HRMS_COST_CENTERS
    await executeQuery(`CREATE TABLE HRMS_COST_CENTERS (
  COST_CENTER_ID NUMBER NOT NULL,
  COST_CENTER_CODE VARCHAR2(20) NOT NULL,
  COST_CENTER_NAME VARCHAR2(100) NOT NULL,
  DESCRIPTION VARCHAR2(500),
  IS_ACTIVE NUMBER(1) DEFAULT 1,
  CREATED_BY NUMBER,
  CREATED_AT TIMESTAMP(6) DEFAULT SYSTIMESTAMP,
  UPDATED_AT TIMESTAMP(6) DEFAULT SYSTIMESTAMP,
  PRIMARY KEY (COST_CENTER_ID)
)`);
    console.log('‚úÖ Created table: HRMS_COST_CENTERS');

    // HRMS_DEDUCTIONS
    await executeQuery(`CREATE TABLE HRMS_DEDUCTIONS (
  DEDUCTION_ID NUMBER NOT NULL,
  EMPLOYEE_ID NUMBER NOT NULL,
  DEDUCTION_TYPE VARCHAR2(50) NOT NULL,
  AMOUNT NUMBER(10,2) NOT NULL,
  REASON VARCHAR2(500) NOT NULL,
  DEDUCTION_DATE DATE DEFAULT SYSDATE,
  CREATED_BY NUMBER NOT NULL,
  CREATED_AT TIMESTAMP(6) DEFAULT SYSTIMESTAMP,
  UPDATED_AT TIMESTAMP(6) DEFAULT SYSTIMESTAMP,
  PRIMARY KEY (DEDUCTION_ID)
)`);
    console.log('‚úÖ Created table: HRMS_DEDUCTIONS');

    // HRMS_DESIGNATIONS
    await executeQuery(`CREATE TABLE HRMS_DESIGNATIONS (
  DESIGNATION_ID NUMBER NOT NULL,
  DESIGNATION_NAME VARCHAR2(100) NOT NULL,
  DESCRIPTION VARCHAR2(500),
  IS_ACTIVE NUMBER(1) DEFAULT 1,
  CREATED_BY NUMBER,
  CREATED_AT TIMESTAMP(6) DEFAULT SYSTIMESTAMP,
  UPDATED_AT TIMESTAMP(6) DEFAULT SYSTIMESTAMP,
  PRIMARY KEY (DESIGNATION_ID)
)`);
    console.log('‚úÖ Created table: HRMS_DESIGNATIONS');

    // HRMS_EMPLOYEES
    await executeQuery(`CREATE TABLE HRMS_EMPLOYEES (
  EMPLOYEE_ID NUMBER NOT NULL,
  EMPLOYEE_CODE VARCHAR2(20) NOT NULL,
  FIRST_NAME VARCHAR2(50) NOT NULL,
  LAST_NAME VARCHAR2(50) NOT NULL,
  EMAIL VARCHAR2(100) NOT NULL,
  PHONE VARCHAR2(20),
  DATE_OF_BIRTH DATE,
  GENDER VARCHAR2(10),
  ADDRESS VARCHAR2(500),
  CITY VARCHAR2(50),
  STATE VARCHAR2(50),
  COUNTRY VARCHAR2(50),
  POSTAL_CODE VARCHAR2(20),
  EMERGENCY_CONTACT VARCHAR2(20),
  EMERGENCY_CONTACT_NAME VARCHAR2(100),
  JOINING_DATE DATE NOT NULL,
  DESIGNATION_ID NUMBER,
  DEPARTMENT_ID NUMBER,
  SHIFT_ID NUMBER,
  PAY_GRADE_ID NUMBER,
  COST_CENTER_ID NUMBER,
  EMPLOYMENT_TYPE VARCHAR2(20) DEFAULT 'PERMANENT',
  EMPLOYMENT_STATUS VARCHAR2(20) DEFAULT 'ACTIVE',
  PROBATION_PERIOD NUMBER(3) DEFAULT 6,
  CONFIRMATION_DATE DATE,
  TERMINATION_DATE DATE,
  TERMINATION_REASON VARCHAR2(500),
  SALARY NUMBER(10,2),
  CURRENCY VARCHAR2(3) DEFAULT 'USD',
  BANK_NAME VARCHAR2(100),
  BANK_ACCOUNT_NUMBER VARCHAR2(50),
  BANK_ROUTING_NUMBER VARCHAR2(50),
  TAX_ID VARCHAR2(50),
  SOCIAL_SECURITY_NUMBER VARCHAR2(50),
  PASSPORT_NUMBER VARCHAR2(50),
  VISA_NUMBER VARCHAR2(50),
  WORK_PERMIT_NUMBER VARCHAR2(50),
  CREATED_BY NUMBER NOT NULL,
  CREATED_AT TIMESTAMP(6) DEFAULT SYSTIMESTAMP,
  UPDATED_AT TIMESTAMP(6) DEFAULT SYSTIMESTAMP,
  PRIMARY KEY (EMPLOYEE_ID)
)`);
    console.log('‚úÖ Created table: HRMS_EMPLOYEES');

    // HRMS_EMPLOYEE_CALENDAR
    await executeQuery(`CREATE TABLE HRMS_EMPLOYEE_CALENDAR (
  EMPLOYEE_CALENDAR_ID NUMBER NOT NULL,
  EMPLOYEE_ID NUMBER NOT NULL,
  CALENDAR_ID NUMBER NOT NULL,
  START_DATE DATE NOT NULL,
  END_DATE DATE,
  IS_ACTIVE NUMBER(1) DEFAULT 1,
  CREATED_BY NUMBER,
  CREATED_AT TIMESTAMP(6) DEFAULT SYSTIMESTAMP,
  UPDATED_AT TIMESTAMP(6) DEFAULT SYSTIMESTAMP,
  PRIMARY KEY (EMPLOYEE_CALENDAR_ID)
)`);
    console.log('‚úÖ Created table: HRMS_EMPLOYEE_CALENDAR');

    // HRMS_EMPLOYEE_COMPENSATION
    await executeQuery(`CREATE TABLE HRMS_EMPLOYEE_COMPENSATION (
  COMPENSATION_ID NUMBER NOT NULL,
  EMPLOYEE_ID NUMBER NOT NULL,
  COMPONENT_ID NUMBER NOT NULL,
  AMOUNT NUMBER(10,2) NOT NULL,
  EFFECTIVE_DATE DATE NOT NULL,
  END_DATE DATE,
  IS_ACTIVE NUMBER(1) DEFAULT 1,
  CREATED_BY NUMBER,
  CREATED_AT TIMESTAMP(6) DEFAULT SYSTIMESTAMP,
  UPDATED_AT TIMESTAMP(6) DEFAULT SYSTIMESTAMP,
  PRIMARY KEY (COMPENSATION_ID)
)`);
    console.log('‚úÖ Created table: HRMS_EMPLOYEE_COMPENSATION');

    // HRMS_LEAVES
    await executeQuery(`CREATE TABLE HRMS_LEAVES (
  LEAVE_ID NUMBER NOT NULL,
  EMPLOYEE_ID NUMBER NOT NULL,
  LEAVE_TYPE_ID NUMBER NOT NULL,
  START_DATE DATE NOT NULL,
  END_DATE DATE NOT NULL,
  TOTAL_DAYS NUMBER(5,2) NOT NULL,
  REASON VARCHAR2(500) NOT NULL,
  STATUS VARCHAR2(20) DEFAULT 'PENDING',
  APPROVED_BY NUMBER,
  APPROVED_AT TIMESTAMP(6),
  APPROVAL_COMMENTS VARCHAR2(500),
  REJECTION_REASON VARCHAR2(500),
  ATTACHMENT_URL VARCHAR2(500),
  CREATED_BY NUMBER NOT NULL,
  CREATED_AT TIMESTAMP(6) DEFAULT SYSTIMESTAMP,
  UPDATED_AT TIMESTAMP(6) DEFAULT SYSTIMESTAMP,
  PRIMARY KEY (LEAVE_ID)
)`);
    console.log('‚úÖ Created table: HRMS_LEAVES');

    // HRMS_LEAVE_BALANCE
    await executeQuery(`CREATE TABLE HRMS_LEAVE_BALANCE (
  BALANCE_ID NUMBER NOT NULL,
  EMPLOYEE_ID NUMBER NOT NULL,
  LEAVE_TYPE_ID NUMBER NOT NULL,
  YEAR NUMBER(4) NOT NULL,
  TOTAL_ENTITLED NUMBER(5,2) NOT NULL,
  TOTAL_TAKEN NUMBER(5,2) DEFAULT 0,
  BALANCE_LEFT NUMBER(5,2),
  CREATED_BY NUMBER,
  CREATED_AT TIMESTAMP(6) DEFAULT SYSTIMESTAMP,
  UPDATED_AT TIMESTAMP(6) DEFAULT SYSTIMESTAMP,
  PRIMARY KEY (BALANCE_ID)
)`);
    console.log('‚úÖ Created table: HRMS_LEAVE_BALANCE');

    // HRMS_LEAVE_POLICIES
    await executeQuery(`CREATE TABLE HRMS_LEAVE_POLICIES (
  POLICY_ID NUMBER NOT NULL,
  POLICY_NAME VARCHAR2(100) NOT NULL,
  LEAVE_TYPE_ID NUMBER NOT NULL,
  ENTITLEMENT_DAYS NUMBER(5,2) NOT NULL,
  CARRY_FORWARD_DAYS NUMBER(5,2) DEFAULT 0,
  MAX_CARRY_FORWARD_DAYS NUMBER(5,2),
  APPLICABLE_FROM_MONTHS NUMBER(3) DEFAULT 0,
  APPLICABLE_TO_DESIGNATIONS VARCHAR2(500),
  APPLICABLE_TO_DEPARTMENTS VARCHAR2(500),
  IS_ACTIVE NUMBER(1) DEFAULT 1,
  DESCRIPTION VARCHAR2(500),
  CREATED_BY NUMBER,
  CREATED_AT TIMESTAMP(6) DEFAULT SYSTIMESTAMP,
  UPDATED_AT TIMESTAMP(6) DEFAULT SYSTIMESTAMP,
  PRIMARY KEY (POLICY_ID)
)`);
    console.log('‚úÖ Created table: HRMS_LEAVE_POLICIES');

    // HRMS_LEAVE_RESUMPTIONS
    await executeQuery(`CREATE TABLE HRMS_LEAVE_RESUMPTIONS (
  RESUMPTION_ID NUMBER NOT NULL,
  LEAVE_ID NUMBER NOT NULL,
  RESUMPTION_DATE DATE NOT NULL,
  RESUMPTION_TIME VARCHAR2(5),
  STATUS VARCHAR2(20) DEFAULT 'PENDING',
  APPROVED_BY NUMBER,
  APPROVED_AT TIMESTAMP(6),
  APPROVAL_COMMENTS VARCHAR2(500),
  REJECTION_REASON VARCHAR2(500),
  CREATED_BY NUMBER NOT NULL,
  CREATED_AT TIMESTAMP(6) DEFAULT SYSTIMESTAMP,
  UPDATED_AT TIMESTAMP(6) DEFAULT SYSTIMESTAMP,
  PRIMARY KEY (RESUMPTION_ID)
)`);
    console.log('‚úÖ Created table: HRMS_LEAVE_RESUMPTIONS');

    // HRMS_LOANS
    await executeQuery(`CREATE TABLE HRMS_LOANS (
  LOAN_ID NUMBER NOT NULL,
  EMPLOYEE_ID NUMBER NOT NULL,
  LOAN_TYPE VARCHAR2(50) NOT NULL,
  LOAN_AMOUNT NUMBER(10,2) NOT NULL,
  INTEREST_RATE NUMBER(5,2) DEFAULT 0,
  LOAN_TERM NUMBER(3) NOT NULL,
  MONTHLY_INSTALLMENT NUMBER(10,2),
  START_DATE DATE NOT NULL,
  END_DATE DATE,
  STATUS VARCHAR2(20) DEFAULT 'PENDING',
  APPROVED_BY NUMBER,
  APPROVED_AT TIMESTAMP(6),
  APPROVAL_COMMENTS VARCHAR2(500),
  REJECTION_REASON VARCHAR2(500),
  CREATED_BY NUMBER NOT NULL,
  CREATED_AT TIMESTAMP(6) DEFAULT SYSTIMESTAMP,
  UPDATED_AT TIMESTAMP(6) DEFAULT SYSTIMESTAMP,
  PRIMARY KEY (LOAN_ID)
)`);
    console.log('‚úÖ Created table: HRMS_LOANS');

    // HRMS_LOCATIONS
    await executeQuery(`CREATE TABLE HRMS_LOCATIONS (
  LOCATION_ID NUMBER NOT NULL,
  LOCATION_NAME VARCHAR2(100) NOT NULL,
  ADDRESS VARCHAR2(500),
  CITY VARCHAR2(50),
  STATE VARCHAR2(50),
  COUNTRY VARCHAR2(50),
  POSTAL_CODE VARCHAR2(20),
  PHONE VARCHAR2(20),
  EMAIL VARCHAR2(100),
  IS_ACTIVE NUMBER(1) DEFAULT 1,
  CREATED_BY NUMBER,
  CREATED_AT TIMESTAMP(6) DEFAULT SYSTIMESTAMP,
  UPDATED_AT TIMESTAMP(6) DEFAULT SYSTIMESTAMP,
  PRIMARY KEY (LOCATION_ID)
)`);
    console.log('‚úÖ Created table: HRMS_LOCATIONS');

    // HRMS_NAMED_HOLIDAY_TEMPLATES
    await executeQuery(`CREATE TABLE HRMS_NAMED_HOLIDAY_TEMPLATES (
  TEMPLATE_ID NUMBER NOT NULL,
  TEMPLATE_NAME VARCHAR2(100) NOT NULL,
  HOLIDAY_NAME VARCHAR2(100) NOT NULL,
  HOLIDAY_DATE DATE NOT NULL,
  IS_ACTIVE NUMBER(1) DEFAULT 1,
  CREATED_BY NUMBER,
  CREATED_AT TIMESTAMP(6) DEFAULT SYSTIMESTAMP,
  UPDATED_AT TIMESTAMP(6) DEFAULT SYSTIMESTAMP,
  PRIMARY KEY (TEMPLATE_ID)
)`);
    console.log('‚úÖ Created table: HRMS_NAMED_HOLIDAY_TEMPLATES');

    // HRMS_OVERTIME
    await executeQuery(`CREATE TABLE HRMS_OVERTIME (
  OVERTIME_ID NUMBER NOT NULL,
  EMPLOYEE_ID NUMBER NOT NULL,
  OVERTIME_DATE DATE NOT NULL,
  START_TIME VARCHAR2(5) NOT NULL,
  END_TIME VARCHAR2(5) NOT NULL,
  TOTAL_HOURS NUMBER(5,2) NOT NULL,
  OVERTIME_RATE NUMBER(5,2) DEFAULT 1.5,
  AMOUNT NUMBER(10,2),
  REASON VARCHAR2(500),
  STATUS VARCHAR2(20) DEFAULT 'PENDING',
  APPROVED_BY NUMBER,
  APPROVED_AT TIMESTAMP(6),
  APPROVAL_COMMENTS VARCHAR2(500),
  REJECTION_REASON VARCHAR2(500),
  CREATED_BY NUMBER NOT NULL,
  CREATED_AT TIMESTAMP(6) DEFAULT SYSTIMESTAMP,
  UPDATED_AT TIMESTAMP(6) DEFAULT SYSTIMESTAMP,
  PRIMARY KEY (OVERTIME_ID)
)`);
    console.log('‚úÖ Created table: HRMS_OVERTIME');

    // HRMS_PAYROLL_APPROVALS
    await executeQuery(`CREATE TABLE HRMS_PAYROLL_APPROVALS (
  APPROVAL_ID NUMBER NOT NULL,
  PAYROLL_RUN_ID NUMBER NOT NULL,
  APPROVED_BY NUMBER NOT NULL,
  APPROVED_AT TIMESTAMP(6) DEFAULT SYSTIMESTAMP,
  APPROVAL_STATUS VARCHAR2(20) DEFAULT 'APPROVED',
  COMMENTS VARCHAR2(500),
  PRIMARY KEY (APPROVAL_ID)
)`);
    console.log('‚úÖ Created table: HRMS_PAYROLL_APPROVALS');

    // HRMS_PAYROLL_DEDUCTIONS
    await executeQuery(`CREATE TABLE HRMS_PAYROLL_DEDUCTIONS (
  PAYROLL_DEDUCTION_ID NUMBER NOT NULL,
  PAYROLL_DETAIL_ID NUMBER NOT NULL,
  DEDUCTION_TYPE VARCHAR2(50) NOT NULL,
  AMOUNT NUMBER(10,2) NOT NULL,
  DESCRIPTION VARCHAR2(500),
  PRIMARY KEY (PAYROLL_DEDUCTION_ID)
)`);
    console.log('‚úÖ Created table: HRMS_PAYROLL_DEDUCTIONS');

    // HRMS_PAYROLL_DETAILS
    await executeQuery(`CREATE TABLE HRMS_PAYROLL_DETAILS (
  PAYROLL_DETAIL_ID NUMBER NOT NULL,
  PAYROLL_RUN_ID NUMBER NOT NULL,
  EMPLOYEE_ID NUMBER NOT NULL,
  BASIC_SALARY NUMBER(10,2) NOT NULL,
  GROSS_SALARY NUMBER(10,2) NOT NULL,
  NET_SALARY NUMBER(10,2) NOT NULL,
  WORKING_DAYS NUMBER(3) NOT NULL,
  PRESENT_DAYS NUMBER(3),
  ABSENT_DAYS NUMBER(3),
  LEAVE_DAYS NUMBER(3),
  OVERTIME_HOURS NUMBER(5,2),
  OVERTIME_AMOUNT NUMBER(10,2),
  DEDUCTION_AMOUNT NUMBER(10,2),
  ADVANCE_AMOUNT NUMBER(10,2),
  LOAN_AMOUNT NUMBER(10,2),
  BONUS_AMOUNT NUMBER(10,2),
  ALLOWANCE_AMOUNT NUMBER(10,2),
  TAX_AMOUNT NUMBER(10,2),
  INSURANCE_AMOUNT NUMBER(10,2),
  PENSION_AMOUNT NUMBER(10,2),
  OTHER_DEDUCTIONS NUMBER(10,2),
  OTHER_EARNINGS NUMBER(10,2),
  REMARKS VARCHAR2(500),
  CREATED_BY NUMBER,
  CREATED_AT TIMESTAMP(6) DEFAULT SYSTIMESTAMP,
  UPDATED_AT TIMESTAMP(6) DEFAULT SYSTIMESTAMP,
  PRIMARY KEY (PAYROLL_DETAIL_ID)
)`);
    console.log('‚úÖ Created table: HRMS_PAYROLL_DETAILS');

    // HRMS_PAYROLL_EARNINGS
    await executeQuery(`CREATE TABLE HRMS_PAYROLL_EARNINGS (
  PAYROLL_EARNING_ID NUMBER NOT NULL,
  PAYROLL_DETAIL_ID NUMBER NOT NULL,
  EARNING_TYPE VARCHAR2(50) NOT NULL,
  AMOUNT NUMBER(10,2) NOT NULL,
  DESCRIPTION VARCHAR2(500),
  PRIMARY KEY (PAYROLL_EARNING_ID)
)`);
    console.log('‚úÖ Created table: HRMS_PAYROLL_EARNINGS');

    // HRMS_PAYROLL_PERIODS
    await executeQuery(`CREATE TABLE HRMS_PAYROLL_PERIODS (
  PERIOD_ID NUMBER NOT NULL,
  PERIOD_NAME VARCHAR2(100) NOT NULL,
  START_DATE DATE NOT NULL,
  END_DATE DATE NOT NULL,
  PAY_DATE DATE NOT NULL,
  STATUS VARCHAR2(20) DEFAULT 'OPEN',
  CREATED_BY NUMBER,
  CREATED_AT TIMESTAMP(6) DEFAULT SYSTIMESTAMP,
  UPDATED_AT TIMESTAMP(6) DEFAULT SYSTIMESTAMP,
  PRIMARY KEY (PERIOD_ID)
)`);
    console.log('‚úÖ Created table: HRMS_PAYROLL_PERIODS');

    // HRMS_PAYROLL_RUNS
    await executeQuery(`CREATE TABLE HRMS_PAYROLL_RUNS (
  RUN_ID NUMBER NOT NULL,
  PERIOD_ID NUMBER NOT NULL,
  RUN_NAME VARCHAR2(100) NOT NULL,
  RUN_DATE DATE NOT NULL,
  STATUS VARCHAR2(20) DEFAULT 'PENDING',
  TOTAL_EMPLOYEES NUMBER,
  TOTAL_AMOUNT NUMBER(15,2),
  APPROVED_BY NUMBER,
  APPROVED_AT TIMESTAMP(6),
  CREATED_BY NUMBER,
  CREATED_AT TIMESTAMP(6) DEFAULT SYSTIMESTAMP,
  UPDATED_AT TIMESTAMP(6) DEFAULT SYSTIMESTAMP,
  PRIMARY KEY (RUN_ID)
)`);
    console.log('‚úÖ Created table: HRMS_PAYROLL_RUNS');

    // HRMS_PAYROLL_SETTINGS
    await executeQuery(`CREATE TABLE HRMS_PAYROLL_SETTINGS (
  SETTING_ID NUMBER NOT NULL,
  SETTING_NAME VARCHAR2(100) NOT NULL,
  SETTING_VALUE VARCHAR2(500),
  SETTING_TYPE VARCHAR2(20),
  IS_ACTIVE NUMBER(1) DEFAULT 1,
  DESCRIPTION VARCHAR2(500),
  CREATED_BY NUMBER,
  CREATED_AT TIMESTAMP(6) DEFAULT SYSTIMESTAMP,
  UPDATED_AT TIMESTAMP(6) DEFAULT SYSTIMESTAMP,
  PRIMARY KEY (SETTING_ID)
)`);
    console.log('‚úÖ Created table: HRMS_PAYROLL_SETTINGS');

    // HRMS_PAY_COMPONENTS
    await executeQuery(`CREATE TABLE HRMS_PAY_COMPONENTS (
  COMPONENT_ID NUMBER NOT NULL,
  COMPONENT_NAME VARCHAR2(100) NOT NULL,
  COMPONENT_TYPE VARCHAR2(20) NOT NULL,
  DESCRIPTION VARCHAR2(500),
  IS_ACTIVE NUMBER(1) DEFAULT 1,
  CREATED_BY NUMBER,
  CREATED_AT TIMESTAMP(6) DEFAULT SYSTIMESTAMP,
  UPDATED_AT TIMESTAMP(6) DEFAULT SYSTIMESTAMP,
  PRIMARY KEY (COMPONENT_ID)
)`);
    console.log('‚úÖ Created table: HRMS_PAY_COMPONENTS');

    // HRMS_PAY_GRADES
    await executeQuery(`CREATE TABLE HRMS_PAY_GRADES (
  PAY_GRADE_ID NUMBER NOT NULL,
  PAY_GRADE_NAME VARCHAR2(100) NOT NULL,
  MIN_SALARY NUMBER(10,2),
  MAX_SALARY NUMBER(10,2),
  DESCRIPTION VARCHAR2(500),
  IS_ACTIVE NUMBER(1) DEFAULT 1,
  CREATED_BY NUMBER,
  CREATED_AT TIMESTAMP(6) DEFAULT SYSTIMESTAMP,
  UPDATED_AT TIMESTAMP(6) DEFAULT SYSTIMESTAMP,
  PRIMARY KEY (PAY_GRADE_ID)
)`);
    console.log('‚úÖ Created table: HRMS_PAY_GRADES');

    // HRMS_POSITIONS
    await executeQuery(`CREATE TABLE HRMS_POSITIONS (
  POSITION_ID NUMBER NOT NULL,
  POSITION_NAME VARCHAR2(100) NOT NULL,
  DESCRIPTION VARCHAR2(500),
  IS_ACTIVE NUMBER(1) DEFAULT 1,
  CREATED_BY NUMBER,
  CREATED_AT TIMESTAMP(6) DEFAULT SYSTIMESTAMP,
  UPDATED_AT TIMESTAMP(6) DEFAULT SYSTIMESTAMP,
  PRIMARY KEY (POSITION_ID)
)`);
    console.log('‚úÖ Created table: HRMS_POSITIONS');

    // HRMS_PROJECTS
    await executeQuery(`CREATE TABLE HRMS_PROJECTS (
  PROJECT_ID NUMBER NOT NULL,
  PROJECT_CODE VARCHAR2(50) NOT NULL,
  PROJECT_NAME VARCHAR2(100) NOT NULL,
  DESCRIPTION VARCHAR2(500),
  CLIENT_NAME VARCHAR2(100),
  PROJECT_MANAGER NUMBER,
  START_DATE DATE,
  END_DATE DATE,
  STATUS VARCHAR2(20),
  IS_BILLABLE NUMBER,
  HOURLY_RATE NUMBER,
  BUDGET_HOURS NUMBER,
  CREATED_BY NUMBER NOT NULL,
  CREATED_AT TIMESTAMP(6) DEFAULT SYSTIMESTAMP,
  UPDATED_AT TIMESTAMP(6) DEFAULT SYSTIMESTAMP,
  PRIMARY KEY (PROJECT_ID)
)`);
    console.log('‚úÖ Created table: HRMS_PROJECTS');

    // HRMS_RESIGNATIONS
    await executeQuery(`CREATE TABLE HRMS_RESIGNATIONS (
  RESIGNATION_ID NUMBER NOT NULL,
  EMPLOYEE_ID NUMBER NOT NULL,
  TYPE VARCHAR2(20) NOT NULL,
  REASON VARCHAR2(1000) NOT NULL,
  NOTICE_DATE DATE NOT NULL,
  LAST_WORKING_DATE DATE NOT NULL,
  STATUS VARCHAR2(20),
  COMMENTS VARCHAR2(1000),
  ATTACHMENT_URL VARCHAR2(500),
  CREATED_BY NUMBER NOT NULL,
  CREATED_AT TIMESTAMP(6) DEFAULT SYSTIMESTAMP,
  UPDATED_AT TIMESTAMP(6) DEFAULT SYSTIMESTAMP,
  PRIMARY KEY (RESIGNATION_ID)
)`);
    console.log('‚úÖ Created table: HRMS_RESIGNATIONS');

    // HRMS_ROLES
    await executeQuery(`CREATE TABLE HRMS_ROLES (
  ROLE_ID NUMBER NOT NULL,
  ROLE_NAME VARCHAR2(100) NOT NULL,
  DESCRIPTION VARCHAR2(500),
  STATUS VARCHAR2(20),
  CREATED_BY NUMBER,
  CREATED_AT TIMESTAMP(6) DEFAULT SYSTIMESTAMP,
  UPDATED_AT TIMESTAMP(6) DEFAULT SYSTIMESTAMP,
  PRIMARY KEY (ROLE_ID)
)`);
    console.log('‚úÖ Created table: HRMS_ROLES');

    // HRMS_SHIFTS
    await executeQuery(`CREATE TABLE HRMS_SHIFTS (
  SHIFT_ID NUMBER NOT NULL,
  SHIFT_NAME VARCHAR2(100) NOT NULL,
  START_TIME VARCHAR2(5) NOT NULL,
  END_TIME VARCHAR2(5) NOT NULL,
  SHIFT_HOURS NUMBER(5,2),
  DESCRIPTION VARCHAR2(255),
  STATUS VARCHAR2(20),
  OVERTIME_APPLICABLE NUMBER,
  OVERTIME_CAP_HOURS NUMBER,
  CREATED_AT TIMESTAMP(6) DEFAULT SYSTIMESTAMP,
  UPDATED_AT TIMESTAMP(6) DEFAULT SYSTIMESTAMP,
  FLEXIBLE_TIME_APPLICABLE NUMBER,
  LATE_COMING_TOLERANCE NUMBER,
  EARLY_GOING_TOLERANCE NUMBER,
  HAS_BREAK_TIME NUMBER,
  BREAK_START_TIME VARCHAR2(5),
  BREAK_END_TIME VARCHAR2(5),
  BREAK_HOURS NUMBER(5,2),
  PRIMARY KEY (SHIFT_ID)
)`);
    console.log('‚úÖ Created table: HRMS_SHIFTS');

    // HRMS_TIMESHEETS
    await executeQuery(`CREATE TABLE HRMS_TIMESHEETS (
  TIMESHEET_ID NUMBER NOT NULL,
  EMPLOYEE_ID NUMBER NOT NULL,
  TIMESHEET_DATE DATE NOT NULL,
  WEEK_START_DATE DATE NOT NULL,
  WEEK_END_DATE DATE NOT NULL,
  TOTAL_HOURS NUMBER,
  BREAK_HOURS NUMBER,
  OVERTIME_HOURS NUMBER,
  STATUS VARCHAR2(20),
  SUBMITTED_AT TIMESTAMP(6),
  APPROVED_BY NUMBER,
  APPROVED_AT TIMESTAMP(6),
  APPROVAL_COMMENTS VARCHAR2(500),
  REJECTION_REASON VARCHAR2(500),
  CREATED_BY NUMBER NOT NULL,
  CREATED_AT TIMESTAMP(6) DEFAULT SYSTIMESTAMP,
  UPDATED_AT TIMESTAMP(6) DEFAULT SYSTIMESTAMP,
  PRIMARY KEY (TIMESHEET_ID)
)`);
    console.log('‚úÖ Created table: HRMS_TIMESHEETS');

    // HRMS_TIMESHEET_ENTRIES
    await executeQuery(`CREATE TABLE HRMS_TIMESHEET_ENTRIES (
  ENTRY_ID NUMBER NOT NULL,
  TIMESHEET_ID NUMBER NOT NULL,
  PROJECT_ID NUMBER,
  TASK_DESCRIPTION VARCHAR2(500) NOT NULL,
  START_TIME TIMESTAMP(6),
  END_TIME TIMESTAMP(6),
  TOTAL_HOURS NUMBER NOT NULL,
  BREAK_HOURS NUMBER,
  OVERTIME_HOURS NUMBER,
  IS_BILLABLE NUMBER,
  ACTIVITY_TYPE VARCHAR2(50),
  COMMENTS VARCHAR2(1000),
  CREATED_BY NUMBER NOT NULL,
  CREATED_AT TIMESTAMP(6) DEFAULT SYSTIMESTAMP,
  UPDATED_AT TIMESTAMP(6) DEFAULT SYSTIMESTAMP,
  PRIMARY KEY (ENTRY_ID)
)`);
    console.log('‚úÖ Created table: HRMS_TIMESHEET_ENTRIES');

    // HRMS_USERS
    await executeQuery(`CREATE TABLE HRMS_USERS (
  USER_ID NUMBER NOT NULL,
  USERNAME VARCHAR2(50) NOT NULL,
  EMAIL VARCHAR2(100) NOT NULL,
  PASSWORD_HASH VARCHAR2(255) NOT NULL,
  FIRST_NAME VARCHAR2(50) NOT NULL,
  LAST_NAME VARCHAR2(50) NOT NULL,
  ROLE VARCHAR2(20),
  STATUS VARCHAR2(20),
  LAST_LOGIN TIMESTAMP(6),
  CREATED_AT TIMESTAMP(6) DEFAULT SYSTIMESTAMP,
  UPDATED_AT TIMESTAMP(6) DEFAULT SYSTIMESTAMP,
  PRIMARY KEY (USER_ID)
)`);
    console.log('‚úÖ Created table: HRMS_USERS');

    console.log('üéâ All tables created successfully!');
    console.log('üìä Migration Summary:');
    console.log('   Total Tables Created: 39');
    console.log('   Status: ‚úÖ SUCCESS');
    
  } catch (error) {
    console.error('‚ùå Migration failed:', error.message);
    throw error;
  } finally {
    await closeDatabase();
  }
}

if (require.main === module) {
  runFixedExactMigration().catch(console.error);
}

module.exports = { runFixedExactMigration }; 