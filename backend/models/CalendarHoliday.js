const { executeQuery } = require('../config/database');
const oracledb = require('oracledb');

class CalendarHoliday {
  // Create calendar holiday tables if not exists
  static async createTable() {
    const createCalendarHolidaysTableSQL = `
      CREATE TABLE HRMS_CALENDAR_HOLIDAYS (
        HOLIDAY_ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        CALENDAR_ID NUMBER NOT NULL,
        HOLIDAY_NAME VARCHAR2(200) NOT NULL,
        HOLIDAY_DATE DATE,
        HOLIDAY_TYPE VARCHAR2(50) DEFAULT 'PUBLIC_HOLIDAY',
        HOLIDAY_PATTERN VARCHAR2(50),
        DAY_OF_WEEK NUMBER(1),
        MONTH_OF_YEAR NUMBER(2),
        DAY_OF_MONTH NUMBER(2),
        WEEK_OF_MONTH NUMBER(1),
        IS_RECURRING NUMBER(1) DEFAULT 0,
        IS_NAMED_HOLIDAY NUMBER(1) DEFAULT 0,
        DESCRIPTION CLOB,
        IS_ACTIVE NUMBER(1) DEFAULT 1,
        CREATED_BY VARCHAR2(100),
        CREATED_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        UPDATED_BY VARCHAR2(100),
        UPDATED_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        CONSTRAINT FK_CALENDAR_HOLIDAYS_CALENDAR FOREIGN KEY (CALENDAR_ID) REFERENCES HRMS_CALENDAR(CALENDAR_ID) ON DELETE CASCADE,
        CONSTRAINT CHK_HOLIDAY_PATTERN CHECK (HOLIDAY_PATTERN IN ('WEEKLY', 'MONTHLY', 'YEARLY', 'SPECIFIC_DATE')),
        CONSTRAINT CHK_DAY_OF_WEEK CHECK (DAY_OF_WEEK BETWEEN 0 AND 6),
        CONSTRAINT CHK_MONTH_OF_YEAR CHECK (MONTH_OF_YEAR BETWEEN 1 AND 12),
        CONSTRAINT CHK_DAY_OF_MONTH CHECK (DAY_OF_MONTH BETWEEN 1 AND 31),
        CONSTRAINT CHK_WEEK_OF_MONTH CHECK (WEEK_OF_MONTH BETWEEN 1 AND 5)
      )
    `;

    const createNamedHolidayTemplatesTableSQL = `
      CREATE TABLE HRMS_NAMED_HOLIDAY_TEMPLATES (
        TEMPLATE_ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        TEMPLATE_NAME VARCHAR2(200) NOT NULL,
        TEMPLATE_CODE VARCHAR2(50) UNIQUE NOT NULL,
        HOLIDAY_TYPE VARCHAR2(50) DEFAULT 'PUBLIC_HOLIDAY',
        PATTERN_TYPE VARCHAR2(50) NOT NULL,
        PATTERN_CONFIG CLOB,
        DESCRIPTION CLOB,
        IS_ACTIVE NUMBER(1) DEFAULT 1,
        CREATED_BY VARCHAR2(100),
        CREATED_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        UPDATED_BY VARCHAR2(100),
        UPDATED_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `;

    try {
      await executeQuery(createCalendarHolidaysTableSQL);
      console.log('✅ HRMS_CALENDAR_HOLIDAYS table created successfully');
    } catch (error) {
      if (error.message.includes('ORA-00955')) {
        console.log('ℹ️ HRMS_CALENDAR_HOLIDAYS table already exists');
      } else {
        throw error;
      }
    }

    try {
      await executeQuery(createNamedHolidayTemplatesTableSQL);
      console.log('✅ HRMS_NAMED_HOLIDAY_TEMPLATES table created successfully');
    } catch (error) {
      if (error.message.includes('ORA-00955')) {
        console.log('ℹ️ HRMS_NAMED_HOLIDAY_TEMPLATES table already exists');
      } else {
        throw error;
      }
    }
  }

  // Ensure missing columns exist on older installations
  static async ensureColumns() {
    const tryAdd = async (sql) => {
      try { await executeQuery(sql); } catch (e) {
        const msg = `${e.message}`;
        if (!(msg.includes('ORA-01430') || msg.includes('ORA-01735') || msg.includes('ORA-01442') || msg.includes('ORA-00904'))) {
          // Ignore: column exists or invalid alter; rethrow others
          throw e;
        }
      }
    };
    await tryAdd(`ALTER TABLE HRMS_CALENDAR_HOLIDAYS ADD (HOLIDAY_PATTERN VARCHAR2(50))`);
    await tryAdd(`ALTER TABLE HRMS_CALENDAR_HOLIDAYS ADD (DAY_OF_WEEK NUMBER(1))`);
    await tryAdd(`ALTER TABLE HRMS_CALENDAR_HOLIDAYS ADD (MONTH_OF_YEAR NUMBER(2))`);
    await tryAdd(`ALTER TABLE HRMS_CALENDAR_HOLIDAYS ADD (DAY_OF_MONTH NUMBER(2))`);
    await tryAdd(`ALTER TABLE HRMS_CALENDAR_HOLIDAYS ADD (WEEK_OF_MONTH NUMBER(1))`);
    await tryAdd(`ALTER TABLE HRMS_CALENDAR_HOLIDAYS ADD (IS_RECURRING NUMBER(1) DEFAULT 0)`);
    await tryAdd(`ALTER TABLE HRMS_CALENDAR_HOLIDAYS ADD (IS_NAMED_HOLIDAY NUMBER(1) DEFAULT 0)`);
  }

  // Create new holiday
  static async create(holidayData) {
    await this.ensureColumns();
    const {
      calendarId,
      holidayName,
      holidayDate,
      holidayType = 'PUBLIC_HOLIDAY',
      holidayPattern = 'SPECIFIC_DATE',
      dayOfWeek,
      monthOfYear,
      dayOfMonth,
      weekOfMonth,
      isRecurring = 0,
      isNamedHoliday = 0,
      description,
      createdBy
    } = holidayData;

    const sql = `
      INSERT INTO HRMS_CALENDAR_HOLIDAYS (
        CALENDAR_ID, HOLIDAY_NAME, HOLIDAY_DATE, HOLIDAY_TYPE, 
        HOLIDAY_PATTERN, DAY_OF_WEEK, MONTH_OF_YEAR, DAY_OF_MONTH, 
        WEEK_OF_MONTH, IS_RECURRING, IS_NAMED_HOLIDAY, DESCRIPTION, CREATED_BY
      ) VALUES (
        :calendarId, :holidayName, :holidayDate, :holidayType,
        :holidayPattern, :dayOfWeek, :monthOfYear, :dayOfMonth,
        :weekOfMonth, :isRecurring, :isNamedHoliday, :description, :createdBy
      ) RETURNING HOLIDAY_ID INTO :holidayId
    `;
    const params = {
      calendarId,
      holidayName,
      holidayDate: holidayDate ? new Date(holidayDate) : null,
      holidayType,
      holidayPattern,
      dayOfWeek: dayOfWeek || null,
      monthOfYear: monthOfYear || null,
      dayOfMonth: dayOfMonth || null,
      weekOfMonth: weekOfMonth || null,
      isRecurring,
      isNamedHoliday,
      description,
      createdBy,
      holidayId: { type: oracledb.NUMBER, dir: oracledb.BIND_OUT }
    };
    const result = await executeQuery(sql, params);
    return result.outBinds.holidayId[0];
  }

  // Get all holidays
  static async getAll(params = {}) {
    let query = `
      SELECT 
        h.HOLIDAY_ID,
        h.CALENDAR_ID,
        c.CALENDAR_NAME,
        c.CALENDAR_CODE,
        h.HOLIDAY_NAME,
        h.HOLIDAY_DATE,
        h.HOLIDAY_TYPE,
        h.HOLIDAY_PATTERN,
        h.DAY_OF_WEEK,
        h.MONTH_OF_YEAR,
        h.DAY_OF_MONTH,
        h.WEEK_OF_MONTH,
        h.IS_RECURRING,
        h.IS_NAMED_HOLIDAY,
        h.DESCRIPTION,
        h.IS_ACTIVE,
        h.CREATED_BY,
        h.CREATED_DATE,
        h.UPDATED_BY,
        h.UPDATED_DATE
      FROM HRMS_CALENDAR_HOLIDAYS h
      JOIN HRMS_CALENDAR c ON h.CALENDAR_ID = c.CALENDAR_ID
      WHERE 1=1
    `;

    const bindVars = {};

    if (params.calendarId) {
      query += ` AND h.CALENDAR_ID = :calendarId`;
      bindVars.calendarId = params.calendarId;
    }

    if (params.holidayType) {
      query += ` AND h.HOLIDAY_TYPE = :holidayType`;
      bindVars.holidayType = params.holidayType;
    }

    if (params.isRecurring !== undefined) {
      query += ` AND h.IS_RECURRING = :isRecurring`;
      bindVars.isRecurring = params.isRecurring;
    }

    if (params.isActive !== undefined) {
      query += ` AND h.IS_ACTIVE = :isActive`;
      bindVars.isActive = params.isActive;
    }

    query += ` ORDER BY h.HOLIDAY_NAME`;

    const result = await executeQuery(query, bindVars);
    return result.rows.map(row => ({
      HOLIDAY_ID: row[0],
      CALENDAR_ID: row[1],
      CALENDAR_NAME: row[2],
      CALENDAR_CODE: row[3],
      HOLIDAY_NAME: row[4],
      HOLIDAY_DATE: row[5],
      HOLIDAY_TYPE: row[6],
      HOLIDAY_PATTERN: row[7],
      DAY_OF_WEEK: row[8],
      MONTH_OF_YEAR: row[9],
      DAY_OF_MONTH: row[10],
      WEEK_OF_MONTH: row[11],
      IS_RECURRING: row[12],
      IS_NAMED_HOLIDAY: row[13],
      DESCRIPTION: row[14],
      IS_ACTIVE: row[15],
      CREATED_BY: row[16],
      CREATED_DATE: row[17],
      UPDATED_BY: row[18],
      UPDATED_DATE: row[19]
    }));
  }

  // Get holiday by ID
  static async getById(id) {
    const sql = `
      SELECT 
        h.HOLIDAY_ID,
        h.CALENDAR_ID,
        c.CALENDAR_NAME,
        c.CALENDAR_CODE,
        h.HOLIDAY_NAME,
        h.HOLIDAY_DATE,
        h.HOLIDAY_TYPE,
        h.HOLIDAY_PATTERN,
        h.DAY_OF_WEEK,
        h.MONTH_OF_YEAR,
        h.DAY_OF_MONTH,
        h.WEEK_OF_MONTH,
        h.IS_RECURRING,
        h.IS_NAMED_HOLIDAY,
        h.DESCRIPTION,
        h.IS_ACTIVE,
        h.CREATED_BY,
        h.CREATED_DATE,
        h.UPDATED_BY,
        h.UPDATED_DATE
      FROM HRMS_CALENDAR_HOLIDAYS h
      JOIN HRMS_CALENDAR c ON h.CALENDAR_ID = c.CALENDAR_ID
      WHERE h.HOLIDAY_ID = :id
    `;
    const result = await executeQuery(sql, { id });

    if (result.rows.length === 0) {
      throw new Error('Holiday not found');
    }

    const row = result.rows[0];
    return {
      HOLIDAY_ID: row[0],
      CALENDAR_ID: row[1],
      CALENDAR_NAME: row[2],
      CALENDAR_CODE: row[3],
      HOLIDAY_NAME: row[4],
      HOLIDAY_DATE: row[5],
      HOLIDAY_TYPE: row[6],
      HOLIDAY_PATTERN: row[7],
      DAY_OF_WEEK: row[8],
      MONTH_OF_YEAR: row[9],
      DAY_OF_MONTH: row[10],
      WEEK_OF_MONTH: row[11],
      IS_RECURRING: row[12],
      IS_NAMED_HOLIDAY: row[13],
      DESCRIPTION: row[14],
      IS_ACTIVE: row[15],
      CREATED_BY: row[16],
      CREATED_DATE: row[17],
      UPDATED_BY: row[18],
      UPDATED_DATE: row[19]
    };
  }

  // Update holiday
  static async update(id, holidayData) {
    await this.ensureColumns();
    const {
      holidayName,
      holidayDate,
      holidayType,
      holidayPattern,
      dayOfWeek,
      monthOfYear,
      dayOfMonth,
      weekOfMonth,
      isRecurring,
      isNamedHoliday,
      description,
      isActive,
      updatedBy
    } = holidayData;

    const sql = `
      UPDATE HRMS_CALENDAR_HOLIDAYS SET
        HOLIDAY_NAME = :holidayName,
        HOLIDAY_DATE = :holidayDate,
        HOLIDAY_TYPE = :holidayType,
        HOLIDAY_PATTERN = :holidayPattern,
        DAY_OF_WEEK = :dayOfWeek,
        MONTH_OF_YEAR = :monthOfYear,
        DAY_OF_MONTH = :dayOfMonth,
        WEEK_OF_MONTH = :weekOfMonth,
        IS_RECURRING = :isRecurring,
        IS_NAMED_HOLIDAY = :isNamedHoliday,
        DESCRIPTION = :description,
        IS_ACTIVE = :isActive,
        UPDATED_BY = :updatedBy,
        UPDATED_DATE = CURRENT_TIMESTAMP
      WHERE HOLIDAY_ID = :id
    `;
    const params = {
      holidayName,
      holidayDate: holidayDate ? new Date(holidayDate) : null,
      holidayType,
      holidayPattern,
      dayOfWeek: dayOfWeek || null,
      monthOfYear: monthOfYear || null,
      dayOfMonth: dayOfMonth || null,
      weekOfMonth: weekOfMonth || null,
      isRecurring,
      isNamedHoliday,
      description,
      isActive,
      updatedBy,
      id
    };
    const result = await executeQuery(sql, params);
    return result.rowsAffected;
  }

  // Delete holiday
  static async delete(id) {
    const sql = `DELETE FROM HRMS_CALENDAR_HOLIDAYS WHERE HOLIDAY_ID = :id`;
    const result = await executeQuery(sql, { id });
    return result.rowsAffected;
  }

  // Get holidays by calendar
  static async getHolidaysByCalendar(calendarId, year) {
    const sql = `
      SELECT 
        h.HOLIDAY_ID,
        h.CALENDAR_ID,
        h.HOLIDAY_NAME,
        h.HOLIDAY_DATE,
        h.HOLIDAY_TYPE,
        h.HOLIDAY_PATTERN,
        h.DAY_OF_WEEK,
        h.MONTH_OF_YEAR,
        h.DAY_OF_MONTH,
        h.WEEK_OF_MONTH,
        h.IS_RECURRING,
        h.IS_NAMED_HOLIDAY,
        h.DESCRIPTION,
        h.IS_ACTIVE
      FROM HRMS_CALENDAR_HOLIDAYS h
      WHERE h.CALENDAR_ID = :calendarId 
      AND h.IS_ACTIVE = 1
      AND (
        (h.HOLIDAY_DATE IS NOT NULL AND EXTRACT(YEAR FROM h.HOLIDAY_DATE) = :year)
        OR h.IS_RECURRING = 1
      )
      ORDER BY h.HOLIDAY_NAME
    `;
    const result = await executeQuery(sql, { calendarId, year });

    return result.rows.map(row => ({
      HOLIDAY_ID: row[0],
      CALENDAR_ID: row[1],
      HOLIDAY_NAME: row[2],
      HOLIDAY_DATE: row[3],
      HOLIDAY_TYPE: row[4],
      HOLIDAY_PATTERN: row[5],
      DAY_OF_WEEK: row[6],
      MONTH_OF_YEAR: row[7],
      DAY_OF_MONTH: row[8],
      WEEK_OF_MONTH: row[9],
      IS_RECURRING: row[10],
      IS_NAMED_HOLIDAY: row[11],
      DESCRIPTION: row[12],
      IS_ACTIVE: row[13]
    }));
  }

  // Get holiday types
  static async getHolidayTypes() {
    return [
      { value: 'PUBLIC_HOLIDAY', label: 'Public Holiday' },
      { value: 'COMPANY_HOLIDAY', label: 'Company Holiday' },
      { value: 'OPTIONAL_HOLIDAY', label: 'Optional Holiday' },
      { value: 'RESTRICTED_HOLIDAY', label: 'Restricted Holiday' }
    ];
  }

  // Get holiday patterns
  static async getHolidayPatterns() {
    return [
      { value: 'SPECIFIC_DATE', label: 'Specific Date' },
      { value: 'WEEKLY', label: 'Weekly (Every Week)' },
      { value: 'MONTHLY', label: 'Monthly (Every Month)' },
      { value: 'YEARLY', label: 'Yearly (Every Year)' }
    ];
  }

  // Get day of week options
  static async getDayOfWeekOptions() {
    return [
      { value: 0, label: 'Sunday' },
      { value: 1, label: 'Monday' },
      { value: 2, label: 'Tuesday' },
      { value: 3, label: 'Wednesday' },
      { value: 4, label: 'Thursday' },
      { value: 5, label: 'Friday' },
      { value: 6, label: 'Saturday' }
    ];
  }

  // Get week of month options
  static async getWeekOfMonthOptions() {
    return [
      { value: 1, label: 'First Week' },
      { value: 2, label: 'Second Week' },
      { value: 3, label: 'Third Week' },
      { value: 4, label: 'Fourth Week' },
      { value: 5, label: 'Last Week' }
    ];
  }

  // Get named holiday templates
  static async getNamedHolidayTemplates() {
    return [
      {
        templateCode: 'DIWALI',
        templateName: 'Diwali',
        holidayType: 'PUBLIC_HOLIDAY',
        patternType: 'YEARLY',
        patternConfig: { monthOfYear: 10, dayOfMonth: null, weekOfMonth: 4, dayOfWeek: 0 },
        description: 'Festival of Lights - celebrated on the new moon day of Kartik month'
      },
      {
        templateCode: 'CHRISTMAS',
        templateName: 'Christmas',
        holidayType: 'PUBLIC_HOLIDAY',
        patternType: 'YEARLY',
        patternConfig: { monthOfYear: 12, dayOfMonth: 25, weekOfMonth: null, dayOfWeek: null },
        description: 'Christian celebration of the birth of Jesus Christ'
      },
      {
        templateCode: 'NEW_YEAR',
        templateName: 'New Year',
        holidayType: 'PUBLIC_HOLIDAY',
        patternType: 'YEARLY',
        patternConfig: { monthOfYear: 1, dayOfMonth: 1, weekOfMonth: null, dayOfWeek: null },
        description: 'New Year Day celebration'
      },
      {
        templateCode: 'INDEPENDENCE_DAY',
        templateName: 'Independence Day',
        holidayType: 'PUBLIC_HOLIDAY',
        patternType: 'YEARLY',
        patternConfig: { monthOfYear: 8, dayOfMonth: 15, weekOfMonth: null, dayOfWeek: null },
        description: 'Indian Independence Day'
      },
      {
        templateCode: 'REPUBLIC_DAY',
        templateName: 'Republic Day',
        holidayType: 'PUBLIC_HOLIDAY',
        patternType: 'YEARLY',
        patternConfig: { monthOfYear: 1, dayOfMonth: 26, weekOfMonth: null, dayOfWeek: null },
        description: 'Indian Republic Day'
      },
      {
        templateCode: 'SUNDAY',
        templateName: 'Every Sunday',
        holidayType: 'COMPANY_HOLIDAY',
        patternType: 'WEEKLY',
        patternConfig: { monthOfYear: null, dayOfMonth: null, weekOfMonth: null, dayOfWeek: 0 },
        description: 'Weekly holiday - every Sunday'
      },
      {
        templateCode: 'SATURDAY_SUNDAY',
        templateName: 'Weekend (Saturday & Sunday)',
        holidayType: 'COMPANY_HOLIDAY',
        patternType: 'WEEKLY',
        patternConfig: { monthOfYear: null, dayOfMonth: null, weekOfMonth: null, dayOfWeek: [5, 6] },
        description: 'Weekend holidays - every Saturday and Sunday'
      }
    ];
  }
}

module.exports = CalendarHoliday; 