const { executeQuery } = require('../config/database');
const oracledb = require('oracledb');

class Calendar {
  // Create calendar tables if not exists
  static async createTable() {
    const createCalendarTableSQL = `
      CREATE TABLE HRMS_CALENDAR (
        CALENDAR_ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        CALENDAR_CODE VARCHAR2(50) UNIQUE NOT NULL,
        CALENDAR_NAME VARCHAR2(200) NOT NULL,
        DESCRIPTION VARCHAR2(4000),
        WEEKLY_HOLIDAYS VARCHAR2(4000),
        IS_ACTIVE NUMBER(1) DEFAULT 1,
        CREATED_BY VARCHAR2(100),
        CREATED_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        UPDATED_BY VARCHAR2(100),
        UPDATED_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `;

    const createCalendarHolidaysTableSQL = `
      CREATE TABLE HRMS_CALENDAR_HOLIDAYS (
        HOLIDAY_ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        CALENDAR_ID NUMBER NOT NULL,
        HOLIDAY_NAME VARCHAR2(200) NOT NULL,
        HOLIDAY_DATE DATE NOT NULL,
        HOLIDAY_TYPE VARCHAR2(50) DEFAULT 'PUBLIC_HOLIDAY',
        DESCRIPTION VARCHAR2(4000),
        IS_ACTIVE NUMBER(1) DEFAULT 1,
        CREATED_BY VARCHAR2(100),
        CREATED_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        UPDATED_BY VARCHAR2(100),
        UPDATED_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        CONSTRAINT FK_CALENDAR_HOLIDAYS_CALENDAR FOREIGN KEY (CALENDAR_ID) REFERENCES HRMS_CALENDAR(CALENDAR_ID) ON DELETE CASCADE
      )
    `;

    const createEmployeeCalendarTableSQL = `
      CREATE TABLE HRMS_EMPLOYEE_CALENDAR (
        EMPLOYEE_CALENDAR_ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        EMPLOYEE_ID NUMBER NOT NULL,
        CALENDAR_ID NUMBER NOT NULL,
        EFFECTIVE_FROM DATE NOT NULL,
        EFFECTIVE_TO DATE,
        IS_ACTIVE NUMBER(1) DEFAULT 1,
        CREATED_BY VARCHAR2(100),
        CREATED_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        UPDATED_BY VARCHAR2(100),
        UPDATED_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                  CONSTRAINT FK_EMPLOYEE_CALENDAR_EMPLOYEE FOREIGN KEY (EMPLOYEE_ID) REFERENCES HRMS_EMPLOYEES(EMPLOYEE_ID) ON DELETE CASCADE,
        CONSTRAINT FK_EMPLOYEE_CALENDAR_CALENDAR FOREIGN KEY (CALENDAR_ID) REFERENCES HRMS_CALENDAR(CALENDAR_ID) ON DELETE CASCADE
      )
    `;

    try {
      await executeQuery(createCalendarTableSQL);
      console.log('✅ HRMS_CALENDAR table created successfully');
    } catch (error) {
      if (error.message.includes('ORA-00955')) {
        console.log('ℹ️ HRMS_CALENDAR table already exists');
      } else {
        throw error;
      }
    }

    try {
      await executeQuery(createCalendarHolidaysTableSQL);
      console.log('✅ HRMS_CALENDAR_HOLIDAYS table created successfully');
    } catch (error) {
      if (error.message.includes('ORA-00955')) {
        console.log('ℹ️ HRMS_CALENDAR_HOLIDAYS table already exists');
      } else {
        throw error;
      }
    }

    try {
      await executeQuery(createEmployeeCalendarTableSQL);
      console.log('✅ HRMS_EMPLOYEE_CALENDAR table created successfully');
    } catch (error) {
      if (error.message.includes('ORA-00955')) {
        console.log('ℹ️ HRMS_EMPLOYEE_CALENDAR table already exists');
      } else {
        throw error;
      }
    }
  }

  // Create new calendar
  static async create(calendarData) {
    // Convert weekly holidays array to JSON string
    const weeklyHolidaysJson = calendarData.weeklyHolidays ? JSON.stringify(calendarData.weeklyHolidays) : null;
    
    const sql = `
      INSERT INTO HRMS_CALENDAR (
        CALENDAR_CODE, CALENDAR_NAME, DESCRIPTION, WEEKLY_HOLIDAYS, IS_ACTIVE, CREATED_BY
      ) VALUES (
        :calendarCode, :calendarName, :description, :weeklyHolidays, :isActive, :createdBy
      ) RETURNING CALENDAR_ID INTO :id
    `;
    const params = {
      calendarCode: calendarData.calendarCode,
      calendarName: calendarData.calendarName,
      description: calendarData.description,
      weeklyHolidays: weeklyHolidaysJson,
      isActive: calendarData.isActive || 1,
      createdBy: calendarData.createdBy,
      id: { type: oracledb.NUMBER, dir: oracledb.BIND_OUT }
    };
    const result = await executeQuery(sql, params);
    return result.outBinds.id[0];
  }

  // Get all calendars
  static async getAll(params = {}) {
    let query = `
      SELECT 
        c.CALENDAR_ID,
        c.CALENDAR_CODE,
        c.CALENDAR_NAME,
        c.DESCRIPTION,
        c.WEEKLY_HOLIDAYS,
        c.IS_ACTIVE,
        c.CREATED_BY,
        c.CREATED_DATE,
        c.UPDATED_BY,
        c.UPDATED_DATE
      FROM HRMS_CALENDAR c
    `;

    const whereConditions = [];
    const bindVars = {};

    if (params.search && params.search !== 'undefined') {
      whereConditions.push(`(c.CALENDAR_NAME LIKE :search OR c.CALENDAR_CODE LIKE :search)`);
      bindVars.search = `%${params.search}%`;
    }

    if (params.isActive !== undefined && params.isActive !== 'undefined') {
      whereConditions.push(`c.IS_ACTIVE = :isActive`);
      bindVars.isActive = params.isActive;
    }

    if (whereConditions.length > 0) {
      query += ` WHERE ${whereConditions.join(' AND ')}`;
    }

    // Add pagination
    if (params.page && params.limit) {
      const offset = (params.page - 1) * params.limit;
      const maxRow = offset + parseInt(params.limit);
      const minRow = offset;
      
      query = `
        SELECT * FROM (
          SELECT a.*, ROWNUM rnum FROM (
            ${query}
            ORDER BY CREATED_DATE DESC
          ) a WHERE ROWNUM <= ${maxRow}
        ) WHERE rnum > ${minRow}
      `;
    } else {
      query += ` ORDER BY c.CREATED_DATE DESC`;
    }

    const result = await executeQuery(query, bindVars, { outFormat: oracledb.OUT_FORMAT_OBJECT });

    // Parse weekly holidays JSON for each calendar
    result.rows.forEach(calendar => {
      if (calendar.WEEKLY_HOLIDAYS) {
        try {
          calendar.WEEKLY_HOLIDAYS = JSON.parse(calendar.WEEKLY_HOLIDAYS);
        } catch (error) {
          console.error('Error parsing weekly holidays JSON:', error);
          calendar.WEEKLY_HOLIDAYS = [];
        }
      } else {
        calendar.WEEKLY_HOLIDAYS = [];
      }
    });

    // Get total count for pagination
    let countQuery = `
      SELECT COUNT(*) as total
      FROM HRMS_CALENDAR c
    `;
    
    if (whereConditions.length > 0) {
      countQuery += ` WHERE ${whereConditions.join(' AND ')}`;
    }

    const countResult = await executeQuery(countQuery, bindVars, { outFormat: oracledb.OUT_FORMAT_OBJECT });
    const totalItems = countResult.rows[0].TOTAL;

    return {
      data: result.rows,
      pagination: {
        currentPage: parseInt(params.page) || 1,
        totalPages: Math.ceil(totalItems / (parseInt(params.limit) || 10)),
        totalItems,
        itemsPerPage: parseInt(params.limit) || 10
      }
    };
  }

  // Get calendar by ID
  static async getById(id) {
    const sql = `
      SELECT 
        c.CALENDAR_ID,
        c.CALENDAR_CODE,
        c.CALENDAR_NAME,
        c.DESCRIPTION,
        c.WEEKLY_HOLIDAYS,
        c.IS_ACTIVE,
        c.CREATED_BY,
        c.CREATED_DATE,
        c.UPDATED_BY,
        c.UPDATED_DATE
      FROM HRMS_CALENDAR c
      WHERE c.CALENDAR_ID = :id
    `;
    const result = await executeQuery(sql, { id }, { outFormat: oracledb.OUT_FORMAT_OBJECT });

    if (result.rows.length === 0) {
      return null;
    }

    // Parse weekly holidays JSON if it exists
    const calendar = result.rows[0];
    if (calendar.WEEKLY_HOLIDAYS) {
      try {
        calendar.WEEKLY_HOLIDAYS = JSON.parse(calendar.WEEKLY_HOLIDAYS);
      } catch (error) {
        console.error('Error parsing weekly holidays JSON:', error);
        calendar.WEEKLY_HOLIDAYS = [];
      }
    } else {
      calendar.WEEKLY_HOLIDAYS = [];
    }

    return calendar;
  }

  // Update calendar
  static async update(id, calendarData) {
    // Convert weekly holidays array to JSON string
    const weeklyHolidaysJson = calendarData.weeklyHolidays ? JSON.stringify(calendarData.weeklyHolidays) : null;
    
    const sql = `
      UPDATE HRMS_CALENDAR SET
        CALENDAR_CODE = :calendarCode,
        CALENDAR_NAME = :calendarName,
        DESCRIPTION = :description,
        WEEKLY_HOLIDAYS = :weeklyHolidays,
        IS_ACTIVE = :isActive,
        UPDATED_BY = :updatedBy,
        UPDATED_DATE = CURRENT_TIMESTAMP
      WHERE CALENDAR_ID = :id
    `;
    const params = {
      calendarCode: calendarData.calendarCode,
      calendarName: calendarData.calendarName,
      description: calendarData.description,
      weeklyHolidays: weeklyHolidaysJson,
      isActive: calendarData.isActive,
      updatedBy: calendarData.updatedBy,
      id
    };
    const result = await executeQuery(sql, params);
    return result.rowsAffected;
  }

  // Delete calendar
  static async delete(id) {
    const sql = `DELETE FROM HRMS_CALENDAR WHERE CALENDAR_ID = :id`;
    const result = await executeQuery(sql, { id });
    return result.rowsAffected;
  }

  // Get calendar dropdown
  static async getDropdown() {
    const sql = `
      SELECT CALENDAR_ID, CALENDAR_CODE, CALENDAR_NAME
      FROM HRMS_CALENDAR 
      WHERE IS_ACTIVE = 1
      ORDER BY CALENDAR_NAME
    `;
    const result = await executeQuery(sql, {}, { outFormat: oracledb.OUT_FORMAT_OBJECT });
    return result.rows;
  }

  // Get weekly holidays
  static async getWeeklyHolidays(calendarId) {
    const sql = `
      SELECT WEEKLY_HOLIDAYS
      FROM HRMS_CALENDAR 
      WHERE CALENDAR_ID = :calendarId AND IS_ACTIVE = 1
    `;
    const result = await executeQuery(sql, { calendarId }, { outFormat: oracledb.OUT_FORMAT_OBJECT });

    if (result.rows.length === 0) {
      return [];
    }

    const weeklyHolidays = result.rows[0].WEEKLY_HOLIDAYS;
    if (weeklyHolidays) {
      try {
        return JSON.parse(weeklyHolidays);
      } catch (error) {
        console.error('Error parsing weekly holidays JSON:', error);
        return [];
      }
    }

    return [];
  }
}

module.exports = Calendar; 